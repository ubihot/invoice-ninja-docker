version: '3.8'

services:
 app:
   build:
      # The build context is the current directory.
      # Docker will send the contents of this directory to the Docker daemon to be used during the build.
      context: . 
      # It should use the file named Dockerfile in the context directory for the build instructions.
      dockerfile: Dockerfile
   # Assigns a specific, predictable name to the container once it's created.
   container_name: invoiceninja-app
   # what does the below property do?
   #restart: unless-stopped

   # Loads environment variables into the container from a local file named .env.
   # This is how you pass secrets like database passwords and app keys to your application without hardcoding them.
   env_file:
     - ./.env

   # It maps files and folders between your local machine (the host) and the container.
   volumes:
     - ./.env:/var/www/html/.env # Mounts your local .env file. This is not read only so I can try to write to it.
     # The three config lines mount your local PHP, FPM, and Supervisor configurations directly into the container.
     # The :ro at the end means they are read-only; the container cannot change them.
     - ./config/php/php.ini:/usr/local/etc/php/conf.d/invoiceninja.ini:ro
     - ./config/php/php-fpm.conf:/usr/local/etc/php-fpm.d/invoiceninja.conf:ro
     - ./config/supervisor/supervisord.conf:/etc/supervisor/conf.d/supervisord.conf:ro
     # this is bind mount
     # Mounts only the public directory from your local project into the container.
     - ./invoiceninja/public:/var/www/html/public
     # This mounts a named volume called app_storage to the Laravel storage directory.
     # Unlike a bind mount, Docker manages this volume.
     # It's the best way to persist data generated by your application, like logs,
     # sessions, and file uploads, even if you remove and recreate the container.
     # Named Volumes
     #  A block of data storage that is fully managed by Docker.
     # A location somewhere on your host machine, but outside of your project directory, in a special area controlled by the Docker engine. You don't need to know or care where the physical files are located.
     - app_public:/var/www/html/ubaid_public
     - app_storage:/var/www/html/storage
   #  Connects the app service to a network named app-network. Services on the same network can discover and communicate with each other.
   networks:
     - app-network

# This defines the network mentioned above.
# driver: bridge is the standard Docker network driver that creates a private network for your containers.
networks:
 app-network:
   driver: bridge

# This defines the named volumes used by your services.
volumes:
 app_public:
   driver: local
 app_storage:
   driver: local  
 mysql_data:
   driver: local
 redis_data:
   driver: local



#   depends_on:
#     db:
#       condition: service_healthy
#     redis:
#       condition: service_healthy

 #web:
 #  image: nginx:latest
 #  container_name: invoiceninja-web
 #  ports:
 #    - "80:80"
 #  volumes:
 #    - ./config/nginx/laravel.conf:/etc/nginx/conf.d/default.conf
 #    - ./invoiceninja:/var/www/html                        # ðŸ‘ˆ giÃ  include public/index.php e build/
 #  depends_on:
 #    - app
 #  networks:
 #    - app-network

 #redis:
   #image: redis:alpine
   #container_name: invoiceninja-redis
   #volumes:
     #- redis_data:/data
   #networks:
     #- app-network
   #healthcheck:
     #test: [ "CMD", "redis-cli", "ping" ]
     #interval: 10s
     #timeout: 5s
     #retries: 5

#  db:
#    image: mysql:8
#    restart: unless-stopped
#    env_file:
#      - ./.env
#    environment:
#      MYSQL_DATABASE: ${DB_DATABASE}
#      MYSQL_USER: ${DB_USERNAME}
#      MYSQL_PASSWORD: ${DB_PASSWORD}
#      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
#    volumes:
#      - mysql_data:/var/lib/mysql
#    networks:
#      - app-network
#    healthcheck:
#      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u${MYSQL_USER}", "-p${MYSQL_PASSWORD}" ]
#      interval: 10s
#      timeout: 5s
#      retries: 5



